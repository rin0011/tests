name: Build sukisu

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "请输入要获取的 release 版本 tag（如 PKR110_15.0.0.840(CN01)"
        required: false
      file_name:
        description: "请选择要获取的文件"
        required: true
        default: boot.img
        type: choice
        options:
          - boot.img
          - init_boot.img
          - fastboot_firmware.zip
  push:
    tags:
      - 'v*.*.*.*'  # 仅在推送匹配 v*.*.* 的 tag 时触发

env:
  TZ: Asia/Shanghai
  CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
  CCACHE_NOHASHDIR: "true"
  CCACHE_HARDLINK: "true"
  CCACHE_DIR: ${{ github.workspace }}/ccache
  CCACHE_MAXSIZE: 10G
  CLANG_VERSION: Clang-19.0.0git-20240723

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          repository: brokestar233/android_kernel_common_oneplus_sm8750
          path: kernel_workspace/android-kernel

      - name: Checkout susfs4ksu
        uses: actions/checkout@v4
        with:
          repository: ShirkNeko/susfs4ksu
          ref: gki-android15-6.6
          path: kernel_workspace/susfs4ksu

      - name: Checkout SukiSU_patch
        uses: actions/checkout@v4
        with:
          repository: ShirkNeko/SukiSU_patch
          path: kernel_workspace/SukiSU_patch   

      - name: Get asset download url from tag and file name
        id: get-asset-url
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          file="${{ github.event.inputs.file_name }}"

          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            tag="${{ github.event.inputs.tag_name }}"
            api="https://api.github.com/repos/rin0011/opace5_pro_fw/releases/tags/$tag"
            asset_url=$(curl -s "$api" | jq -r --arg file "$file" '.assets[] | select(.name==$file) | .browser_download_url')
            if [ -z "$asset_url" ] || [ "$asset_url" == "null" ]; then
              echo "::error::未找到 $file (tag: $tag)"
              exit 1
            fi
          else
            # 自动获取最新 release
            api="https://api.github.com/repos/rin0011/opace5_pro_fw/releases/latest"
            asset_url=$(curl -s "$api" | jq -r --arg file "$file" '.assets[] | select(.name==$file) | .browser_download_url')
            if [ -z "$asset_url" ] || [ "$asset_url" == "null" ]; then
              echo "::error::未找到最新发行版中的 $file"
              exit 1
            fi
          fi
          echo "ASSET_URL=$asset_url" >> $GITHUB_ENV

      - name: Download selected asset
        run: |
          file="${{ github.event.inputs.file_name }}"
          curl -fL "$ASSET_URL" -o "$file"
          if [ ! -f "$file" ]; then
            echo "::error::文件下载失败"
            exit 1
          fi
          filesize=$(wc -c < "$file")
          echo "$file 文件大小: $filesize 字节"
          if [ "$filesize" -lt 10240 ]; then
            echo "::warning::$file 文件大小异常 ($filesize 字节) - 可能是无效文件"
          fi
          echo "BOOT_IMG_PATH=$GITHUB_WORKSPACE/$file" >> $GITHUB_ENV

      # 3. 环境准备
      - name: Setup build kernel environment
        run: |
          echo "BUILD_TIME=$(TZ=Asia/Shanghai date '+%y%m%d')" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y git dwarves libelf-dev ccache automake flex bison build-essential \
                zlib1g-dev libncurses5-dev libc6-dev-i386 bc device-tree-compiler python3 make pahole \
                libssl-dev libffi-dev libxml2-dev libxslt1-dev libgmp-dev libmpfr-dev libmpc-dev gcc-aarch64-linux-gnu
          mkdir -p "${{ env.CCACHE_DIR }}"
          # 配置ccache
          ccache --set-config=cache_dir=${{ env.CCACHE_DIR }}
          ccache --set-config=max_size=${{ env.CCACHE_MAXSIZE }}
          ccache -z


      # 5. 记录当前日期
      - name: Setup build date
        id: date
        run: |
          current_date=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')
          echo "current-date=${current_date}" >> $GITHUB_OUTPUT

      # 6. 缓存 ccache
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-${{ hashFiles('**/Kbuild') }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-
            ccache-${{ runner.os }}-

      # 7. 缓存 clang 工具链
      - name: Cache Clang toolchain
        id: cache-clang
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/kernel_workspace/clang-aosp
          key: ${{ env.CLANG_VERSION }}

      # 8. 下载并解压 clang 工具链（如未命中缓存）
      - name: Download & extract Clang-aosp
        if: steps.cache-clang.outputs.cache-hit != 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          mkdir -p clang-aosp && cd clang-aosp
          wget https://github.com/ZyCromerZ/Clang/releases/download/19.0.0git-20240723-release/Clang-19.0.0git-20240723.tar.gz
          tar -zxvf *.tar.gz > /dev/null


      # 10. 修补 setlocalversion
      - name: Patch setlocalversion
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/scripts
          sed -i 's/ -dirty//g' setlocalversion
          sed -i 's/OKI/android15-8/g' setlocalversion
          
      # 13. 安装 KernelSU
      - name: Setup KernelSU
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/susfs-main/kernel/setup.sh" | bash -s susfs-main
          KSU_VERSION=$(cd KernelSU && expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          #sed -i "s/DKSU_VERSION=13000/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      # 14. SUSFS适配及patch
      - name: Setup susfs
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./
          cp ../SukiSU_patch/hooks/scope_min_manual_hooks_v1.5.patch ./
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          patch -p1 -F 3 < scope_min_manual_hooks_v1.5.patch || true
          

      - name: Add SUSFS Configuration Settings
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          sed -i 's/check_defconfig//' ./build.config.gki
          if [ ! -f "arch/arm64/configs/gki_defconfig" ]; then
              echo "错误: gki_defconfig 文件不存在！"
              ls -la arch/arm64/configs
              exit 1
          fi


          cat <<EOF >> arch/arm64/configs/gki_defconfig
          CONFIG_KSU=y
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KSU_TRACEPOINT_HOOK=n
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_MAP=n
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_LOCALVERSION="-g4dc61d72e02f-abogki415959920-4k"
          CONFIG_IP_SET=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y
          CONFIG_IP_SET_MAX=65534
          CONFIG_IP_SET_BITMAP_IP=y
          CONFIG_IP_SET_BITMAP_IPMAC=y
          CONFIG_IP_SET_BITMAP_PORT=y
          CONFIG_IP_SET_HASH_IP=y
          CONFIG_IP_SET_HASH_IPMARK=y
          CONFIG_IP_SET_HASH_IPPORT=y
          CONFIG_IP_SET_HASH_IPPORTIP=y
          CONFIG_IP_SET_HASH_IPPORTNET=y
          CONFIG_IP_SET_HASH_IPMAC=y
          CONFIG_IP_SET_HASH_MAC=y
          CONFIG_IP_SET_HASH_NETPORTNET=y
          CONFIG_IP_SET_HASH_NET=y
          CONFIG_IP_SET_HASH_NETNET=y
          CONFIG_IP_SET_HASH_NETPORT=y
          CONFIG_IP_SET_HASH_NETIFACE=y
          CONFIG_IP_SET_LIST_SET=y
          EOF

      - name: rustc
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          wget -O pahole.tar.gz https://github.com/rin0011/tests/releases/download/rust/pahole.tar.gz
          wget -O rust.tar.gz https://github.com/rin0011/tests/releases/download/rust/rust.tar.gz
          tar -zxvf rust.tar.gz
          tar -zxvf pahole.tar.gz

      # 18. Kernel 编译
      - name: Build kernel
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel

          export KBUILD_BUILD_TIMESTAMP='Mon May 12 09:09:59 UTC 2025'
          export CCACHE_BASEDIR="$GITHUB_WORKSPACE"
          export CC="ccache clang"
          export CXX="ccache clang++"
          export ARCH=arm64
          export SUBARCH=arm64
          export HEADER_ARCH=arm64
          export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
          export KBUILD_BUILD_HOST=localhost
          export KBUILD_BUILD_USER=Builder
          export LLVM=1

          echo "===== 验证工具链 ====="
          which clang || { echo "错误: Clang 未找到！"; exit 1; }
          clang --version
          which ld.lld || { echo "错误: ld.lld 未找到！"; exit 1; }
          ld.lld --version


          make O=out ARCH=$ARCH SUBARCH=$SUBARCH gki_defconfig

          echo "===== 开始构建内核 ====="
          make -s O=out -j$(nproc --all) \
              ARCH=$ARCH \
              SUBARCH=$SUBARCH \
              HEADER_ARCH=$HEADER_ARCH \
              CC="$CC" \
              CXX="$CXX" \
              LD=ld.lld \
              AR=llvm-ar \
              NM=llvm-nm \
              OBJCOPY=llvm-objcopy \
              OBJDUMP=llvm-objdump \
              READELF=llvm-readelf \
              OBJSIZE=llvm-size \
              STRIP=llvm-strip \
              CLANG_TRIPLE=aarch64-linux-gnu- \
              CROSS_COMPILE=aarch64-linux-gnu- \
              RUSTC=$GITHUB_WORKSPACE/kernel_workspace/rust-ks-kernel.lnx.4.0.r1-rel-linux-x86-1.73.0b/linux-x86/1.73.0b/bin/rustc \
              PAHOLE=$GITHUB_WORKSPACE/kernel_workspace/build-tools-ks-kernel.lnx.4.0.r1-rel-linux-x86/linux-x86/bin/pahole \
              CLANG_AUTOFDO_PROFILE="../android/gki/aarch64/afdo/kernel.afdo" \

          # 显示ccache统计
          ccache -s

      # 19. 检查编译输出
      - name: Check kernel output files
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          if [ -f android-kernel/out/arch/arm64/boot/Image ]; then
              echo "CHECK_IMAGE=true" >> $GITHUB_ENV
          else
              echo "Kernel output file is empty"
              echo "===== out/arch/arm64/boot 目录内容 ====="
              ls -la android-kernel/out/arch/arm64/boot
              echo "===== 最后100行构建日志 ====="
              tail -n 100 android-kernel/out/build.log || true
              exit 1
          fi

      # 20. 打包 AnyKernel3（条件执行）
      - name: Make Anykernel3
        if: env.CHECK_IMAGE == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/
          git clone https://github.com/rin0011/AnyKernel3.git --depth=1
          rm -rf ./AnyKernel3/.git
          cp ./android-kernel/out/arch/arm64/boot/Image AnyKernel3/
          cd AnyKernel3
          zip -r9 ../AnyKernel3-${{ env.KSUVER }}.zip *
          mv ../AnyKernel3-${{ env.KSUVER }}.zip $GITHUB_WORKSPACE/

      # 获取 Magisk 最新版本和下载链接
      - name: Get Magisk latest version info
        id: magisk_version
        run: |
          MAGISK_JSON=$(curl -s https://api.github.com/repos/topjohnwu/Magisk/releases/latest)
          MAGISK_VERSION=$(echo "$MAGISK_JSON" | jq -r .tag_name)
          MAGISK_URL=$(echo "$MAGISK_JSON" | jq -r '.assets[] | select(.name | test("\\.apk$")) | .browser_download_url')
          echo "MAGISK_VERSION=$MAGISK_VERSION" >> $GITHUB_ENV
          echo "MAGISK_URL=$MAGISK_URL" >> $GITHUB_ENV

      # 基于版本号缓存 Magisk APK
      - name: Cache Magisk APK
        id: cache-magisk-apk
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/Magisk.apk
          key: magisk-apk-${{ env.MAGISK_VERSION }}

      # 未命中缓存时自动下载最新 Magisk APK
      - name: Download Magisk APK
        if: steps.cache-magisk-apk.outputs.cache-hit != 'true'
        run: |
          wget -O Magisk.apk "$MAGISK_URL"

      # 解包 magiskboot 可执行文件
      - name: Extract magiskboot from Magisk APK
        run: |
          unzip -o Magisk.apk 'lib/x86_64/libmagiskboot.so' -d magisk_extract
          mv magisk_extract/lib/x86_64/libmagiskboot.so magiskboot
          chmod +x magiskboot
          rm -rf magisk_extract
          echo "MAGISKBOOT_PATH=${GITHUB_WORKSPACE}/magiskboot" >> $GITHUB_ENV

      - name: Repack kernel to boot image
        if: ${{ env.CHECK_IMAGE == 'true' }}
        run: |
          cd "$GITHUB_WORKSPACE"
          if [ ! -f "$MAGISKBOOT_PATH" ]; then
            echo "::error::magiskboot tool not found at $MAGISKBOOT_PATH"
            exit 1
          fi
          if [ ! -f "$BOOT_IMG_PATH" ]; then
            echo "::error::Original boot.img not found at $BOOT_IMG_PATH"
            exit 1
          fi
          mkdir -p repack_workdir
          cd repack_workdir
          cp "$BOOT_IMG_PATH" ./boot.img
          "$MAGISKBOOT_PATH" unpack ./boot.img
          if [ ! -f "kernel" ]; then
            echo "::error::Failed to unpack boot.img"
            ls -la
            exit 1
          fi
          rm -f kernel
          cp "../kernel_workspace/android-kernel/out/arch/arm64/boot/Image" kernel
          "$MAGISKBOOT_PATH" repack ./boot.img
          if [ ! -f "new-boot.img" ]; then
            echo "::error::Failed to repack boot.img"
            exit 1
          fi
          mv new-boot.img "../boot-${KSUVER}.img"
          cd ..
          echo "REPACKED_BOOT_IMG_PATH=$GITHUB_WORKSPACE/boot-${KSUVER}.img" >> $GITHUB_ENV

      # 21. 上传 kernel Image
      - name: Upload Image
        if: env.CHECK_IMAGE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Image-${{ env.KSUVER }}
          path: kernel_workspace/android-kernel/out/arch/arm64/boot/Image

      - name: Upload boot
        if: env.CHECK_IMAGE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Image-${{ env.KSUVER }}
          path: kernel_workspace/boot-${KSUVER}.img

      # 22. 上传 AnyKernel3
      - name: Upload AnyKernel3
        if: env.CHECK_IMAGE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-${{ env.KSUVER }}
          path: ${{ github.workspace }}/AnyKernel3-${{ env.KSUVER }}.zip

      # 23. 发布Release并上传产物
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.KSUVER }}
          name: "sukisu ${{ env.KSUVER }}"
          generate_release_notes: true
          body: |
            **Build Details**
            - KernelSU Version: ${{ env.KSUVER }}
            - Build Date: ${{ steps.date.outputs.current-date }}
            **Build Environment:**
            - OS: ubuntu-latest
            - Clang Version: ${{ env.CLANG_VERSION }}
          files: |
            AnyKernel3-${{ env.KSUVER }}.zip
            kernel_workspace/android-kernel/out/arch/arm64/boot/Image
            ${{ env.REPACKED_BOOT_IMG_PATH }}
