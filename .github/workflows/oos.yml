name: Build 5

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*.*'  # 仅在推送匹配 v*.*.* 的 tag 时触发

env:
  TZ: Asia/Shanghai
  CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
  CCACHE_NOHASHDIR: "true"
  CCACHE_HARDLINK: "true"
  CCACHE_DIR: ${{ github.workspace }}/ccache
  CCACHE_MAXSIZE: 10G
  CLANG_VERSION: Clang-19.0.0git-20240723

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          repository: rin0011/android_kernel_common_oneplus_sm8750
          path: kernel_workspace/android-kernel

      - name: Checkout susfs4ksu
        uses: actions/checkout@v4
        with:
          repository: ShirkNeko/susfs4ksu
          ref: gki-android15-6.6
          path: kernel_workspace/susfs4ksu

      - name: Checkout SukiSU_patch
        uses: actions/checkout@v4
        with:
          repository: ShirkNeko/SukiSU_patch
          path: kernel_workspace/SukiSU_patch

      # 2. 设置10G swap
      - name: Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      # 3. 环境准备
      - name: Setup build kernel environment
        run: |
          echo "BUILD_TIME=$(TZ=Asia/Shanghai date '+%y%m%d')" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y git dwarves libelf-dev ccache automake flex bison build-essential \
                zlib1g-dev libncurses5-dev libc6-dev-i386 bc device-tree-compiler python3 make pahole \
                libssl-dev libffi-dev libxml2-dev libxslt1-dev libgmp-dev libmpfr-dev libmpc-dev gcc-aarch64-linux-gnu
          mkdir -p "${{ env.CCACHE_DIR }}"
          # 配置ccache
          ccache --set-config=cache_dir=${{ env.CCACHE_DIR }}
          ccache --set-config=max_size=${{ env.CCACHE_MAXSIZE }}
          ccache -z


      # 5. 记录当前日期
      - name: Setup build date
        id: date
        run: |
          current_date=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')
          echo "current-date=${current_date}" >> $GITHUB_OUTPUT

      # 6. 缓存 ccache
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-${{ hashFiles('**/Kbuild') }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-
            ccache-${{ runner.os }}-

      # 7. 缓存 clang 工具链
      - name: Cache Clang toolchain
        id: cache-clang
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/kernel_workspace/clang-aosp
          key: ${{ env.CLANG_VERSION }}

      # 8. 下载并解压 clang 工具链（如未命中缓存）
      - name: Download & extract Clang-aosp
        if: steps.cache-clang.outputs.cache-hit != 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          mkdir -p clang-aosp && cd clang-aosp
          wget https://github.com/ZyCromerZ/Clang/releases/download/19.0.0git-20240723-release/Clang-19.0.0git-20240723.tar.gz
          tar -zxvf *.tar.gz > /dev/null
          #unzip *.zip > /dev/null


      # 10. 修补 setlocalversion
      - name: Patch setlocalversion
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/scripts
          sed -i 's/ -dirty//g' setlocalversion
          sed -i 's/OKI/android15-8/g' setlocalversion
          
      # 13. 安装 KernelSU
      - name: Setup KernelSU
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/susfs-main/kernel/setup.sh" | bash -s susfs-main
          KSU_VERSION=$(cd KernelSU && expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          #sed -i "s/DKSU_VERSION=13000/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      # 14. SUSFS适配及patch
      - name: Setup susfs
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./
          cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          patch -p1 -F 3 < syscall_hooks.patch || true
          cd KernelSU-Next
          cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./  
          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch ./
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch  || true
          patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
          patch -p1 --forward < fix_sucompat.c.patch
          patch -p1 --forward < fix_kernel_compat.c.patch
          
          


      - name: Add SUSFS Configuration Settings
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          sed -i 's/check_defconfig//' ./build.config.gki
          if [ ! -f "arch/arm64/configs/gki_defconfig" ]; then
              echo "错误: gki_defconfig 文件不存在！"
              ls -la arch/arm64/configs
              exit 1
          fi


          cat <<EOF >> arch/arm64/configs/gki_defconfig
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KSU_HOOK_KPROBES=n
          CONFIG_KSU_TRACEPOINT_HOOK=n
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_AUTOFDO_CLANG=y
          CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
          CONFIG_LOCALVERSION="-g4dc61d72e02f-abogki415959920-4k"
          EOF

      # 18. Kernel 编译
      - name: Build kernel
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel

          export KBUILD_BUILD_TIMESTAMP='Mon May 12 09:09:59 UTC 2025'
          export CCACHE_BASEDIR="$GITHUB_WORKSPACE"
          export CC="ccache clang"
          export CXX="ccache clang++"
          export ARCH=arm64
          export SUBARCH=arm64
          export HEADER_ARCH=arm64
          export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
          export KBUILD_BUILD_HOST=localhost
          export KBUILD_BUILD_USER=Builder
          export LLVM=1
          export LLVM_IAS=1
          export KCFLAGS="-O2 -flto=thin -Wno-error"
          export KMI="SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0"

          echo "===== 验证工具链 ====="
          which clang || { echo "错误: Clang 未找到！"; exit 1; }
          clang --version
          which ld.lld || { echo "错误: ld.lld 未找到！"; exit 1; }
          ld.lld --version


          make O=out ARCH=$ARCH SUBARCH=$SUBARCH gki_defconfig

          echo "===== 开始构建内核 ====="
          make -s O=out -j$(nproc --all) \
              ARCH=$ARCH \
              SUBARCH=$SUBARCH \
              HEADER_ARCH=$HEADER_ARCH \
              CC="$CC" \
              CXX="$CXX" \
              LD=ld.lld \
              AR=llvm-ar \
              NM=llvm-nm \
              OBJCOPY=llvm-objcopy \
              OBJDUMP=llvm-objdump \
              READELF=llvm-readelf \
              OBJSIZE=llvm-size \
              STRIP=llvm-strip \
              KCFLAGS="$KCFLAGS" \
              KMI="$KMI" \
              CLANG_TRIPLE=aarch64-linux-gnu- \
              CROSS_COMPILE=aarch64-linux-gnu- \
              CLANG_AUTOFDO_PROFILE="../android/gki/aarch64/afdo/kernel.afdo" \

          # 显示ccache统计
          ccache -s

      # 19. 检查编译输出
      - name: Check kernel output files
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          if [ -f android-kernel/out/arch/arm64/boot/Image ]; then
              echo "CHECK_IMAGE=true" >> $GITHUB_ENV
          else
              echo "Kernel output file is empty"
              echo "===== out/arch/arm64/boot 目录内容 ====="
              ls -la android-kernel/out/arch/arm64/boot
              echo "===== 最后100行构建日志 ====="
              tail -n 100 android-kernel/out/build.log || true
              exit 1
          fi

      # 20. 打包 AnyKernel3（条件执行）
      - name: Make Anykernel3
        if: env.CHECK_IMAGE == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/SukiSU_patch
          cp ../android-kernel/out/arch/arm64/boot/Image AnyKernel3/
          cd AnyKernel3
          zip -r9 ../AnyKernel3-${{ env.KSUVER }}.zip *
          mv ../AnyKernel3-${{ env.KSUVER }}.zip $GITHUB_WORKSPACE/

      # 21. 上传 kernel Image
      - name: Upload Image
        if: env.CHECK_IMAGE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Image-${{ env.KSUVER }}
          path: kernel_workspace/android-kernel/out/arch/arm64/boot/Image

      # 22. 上传 AnyKernel3
      - name: Upload AnyKernel3
        if: env.CHECK_IMAGE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-${{ env.KSUVER }}
          path: ${{ github.workspace }}/AnyKernel3-${{ env.KSUVER }}.zip

      # 23. 发布Release并上传产物
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.KSUVER }}
          name: "sukisu ${{ env.KSUVER }}"
          generate_release_notes: true
          body: |
            **Build Details**
            - KernelSU Version: ${{ env.KSUVER }}
            - Build Date: ${{ steps.date.outputs.current-date }}
            **Build Environment:**
            - OS: ubuntu-latest
            - Clang Version: ${{ env.CLANG_VERSION }}
          files: |
            AnyKernel3-${{ env.KSUVER }}.zip
            kernel_workspace/android-kernel/out/arch/arm64/boot/Image